define A() from B();
define A() from B() and each C() within 5 secs from B;
define A() from B() and first C() within 50 millisecs from B;
define A() from B() and each C() within 5 mins from B and not D() within 2 secs from B;
define A() from B() and each C() within 5 hours from B and not D() between B and C;
define Fire( area: string ) from TemperatureReading( area => $a, temperature > 50 ) and not RainReading() within 1 hours from TemperatureReading;
define Fire( area: string ) from TemperatureReading( area => $a, [int] temperature > 10 * 5 ) and not RainReading() within 2 hours from TemperatureReading;
define Fire( area: string ) from TemperatureReading( area => $a, temperature > 50 ) and not RainReading( [string] area == $a ) within 5 hours from TemperatureReading where area := $a, temperature ::= 100;
define Fire( area: string ) from TemperatureReading( area => $a, temperature > 50 ) and not RainReading( [string] area == $a ) within 5 hours from TemperatureReading where area := Temperature.area;
define Fire( area: string, temperature: int ) from TemperatureReading( area => $a, temperature => $b, temperature > 50 ) and not RainReading( [string] area == $a ) within 1 days from TemperatureReading where area := $a, temperature := 2 * $b - 5;
define Fire( area: string, temperature: int ) from TemperatureReading( area => $a, temperature => $b, temperature > 50 ) and last StartDay() within 1 days from TemperatureReading and not RainReading( [string] area == $a ) within 1 hours from TemperatureReading where area := $a, temperature := AVG( TemperatureReading.temperature() ) between Start and TemperatureReading;
define Fire( area: string, temperature: int ) from TemperatureReading( area => $a, temperature => $b, temperature > 50 ) and last StartDay() within 1 days from TemperatureReading and not RainReading( [string] area == $a ) within 1 hours from TemperatureReading where area := $a, temperature := AVG( TemperatureReading.temperature() ) between Start and TemperatureReading consuming TemperatureReading, RainReading;

